package com.jana.creditreportmodel.report.pdf;

import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.jana.creditreportmodel.constants.FontConstants;
import com.jana.creditreportmodel.constants.ReportCommonConstants;
import com.jana.creditreportmodel.entity.CustomersEntity;
import com.jana.creditreportmodel.entity.OrdersEntity;
import com.jana.creditreportmodel.utils.ReportUtils;

/**
 * This is to create a PDF file.
 */
public class PDFCreator {

    
   
    public static void addMetaData(Document document, String sqlXMLFileName) {
        document.addTitle("Credit Report");
        document.addSubject("to make the process easy");
        document.addAuthor("Janardhan");
    }
    
    /** Helper methods start here **/  
    public static void addTitlePage(Document document, CustomersEntity customersEntity) throws DocumentException {

        Paragraph preface1 = new Paragraph();
        addEmptyLine(preface1, 3);
      
        preface1.add(new Phrase(customersEntity.getCustomerName(), FontConstants.RED_BOLD_FONT));
        preface1.setAlignment(Element.ALIGN_MIDDLE);
        preface1.setIndentationLeft(200);
        document.add(preface1);

        Paragraph preface = new Paragraph(); 
        
        addEmptyLine(preface, 3);
        preface.add(new Phrase("Generated Date: ", FontConstants.SMALL_BOLD));
        preface.add(new Phrase(new Date().toString(), FontConstants.NORMAL_FONT));
        addEmptyLine(preface, 1);
        preface.add(new Phrase("Report generated by: ", FontConstants.SMALL_BOLD));
        preface.add(new Phrase("Pratap", FontConstants.NORMAL_FONT));
        addEmptyLine(preface, 2);
   

        document.addSubject("PDF : " + customersEntity.getCustomerName());
        preface.setAlignment(Element.ALIGN_CENTER);
        document.add(preface);
        //document.newPage();
    }


    public static void addContent(Document document, List<OrdersEntity> dataObjList, LocalDate generateDate) throws DocumentException {
        Paragraph paragraph = new Paragraph();
        paragraph.setFont(FontConstants.NORMAL_FONT);
        List<OrdersEntity> creditList = dataObjList.stream()
        		                                   .filter(predicate->predicate.getIsCredit())
        		                                   .collect(Collectors.toList());
        
        
        Long creditTotalSum = creditList.stream()
        		                        .collect(
        		                        Collectors.summingLong(mapper->
        		                                mapper.getBillAmount()+mapper.getCreditInterest()));
        
        
        List<OrdersEntity> debitList = dataObjList.stream()
        		                                  .filter(predicate->!predicate.getIsCredit())
                                                  .collect(Collectors.toList());
        Long debitTotalSum = debitList.stream()
        		.collect(Collectors.summingLong(mapper->
        		mapper.getBillAmount()+mapper.getCreditInterest()));
     
        
        createReportTable(paragraph, creditList,"Credit",creditTotalSum,generateDate);
        addEmptyLine(paragraph,5);
        createReportTable(paragraph,debitList,"Debit",debitTotalSum,generateDate);
        document.add(paragraph);
        createFinalAmount(document,creditTotalSum,debitTotalSum);
    }



	private static void createReportTable(Paragraph paragraph, List<OrdersEntity> dataObjList, String reportType, Long totalSum, LocalDate generateDate)
    throws BadElementException {

        PdfPTable table = new PdfPTable(ReportCommonConstants.HEADER_ARRAY.length);
        table.setWidthPercentage(100);
        Chunk chunk=new Chunk(reportType+" Report :- ", FontConstants.BLUE_BOLD_FONT);
        
        
        paragraph.add(chunk);

        if(null == dataObjList || dataObjList.size()==0){
            paragraph.add(new Chunk("No data to display."));
            return;
        }
       
        addHeaderInTable(ReportCommonConstants.HEADER_ARRAY, table);

        createDataRows(dataObjList, table,generateDate);
       
        addSubTotalRow(table,totalSum);
        
        paragraph.add(table);
        
      
    }


	   private static void addHeaderInTable(String[] headerArray, PdfPTable table){

	        PdfPCell c1 = null;
	        for(String header : headerArray) {
	            c1 = new PdfPCell(new Phrase(header, FontConstants.SMALL_BOLD));
	            c1.setBackgroundColor(BaseColor.GREEN);
	            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	            table.addCell(c1);
	        }
	        table.setHeaderRows(1);
	    }
	   
		private static void createDataRows(List<OrdersEntity> dataObjList, PdfPTable table, LocalDate generateDate) {
			int count = 1;

	        for(OrdersEntity dataObject : dataObjList){
	            addToTable(table, String.valueOf(count));
	            addToTable(table, dataObject.getBillNumber());
	            addToTable(table, dataObject.getBillDate());
	            addToTable(table, dataObject.getBillAmount());
	            addToTable(table, ReportUtils.getDaysBetweenDates(dataObject.getBillDate(), generateDate));
	            addToTable(table, dataObject.getCreditInterest());
	            addToTable(table, dataObject.getCreditInterest()+dataObject.getBillAmount());
	            count++;
	        }
		}
		

		private static void addSubTotalRow(PdfPTable table, long sum) {
			
			PdfPCell cell = table.getDefaultCell();
		      int border = cell.getBorder();
			for(int i=0;i<ReportCommonConstants.HEADER_ARRAY.length-2;i++) {
				cell.setBorder(PdfPCell.NO_BORDER);
				addEmptyCell(table);
			}
			cell.setBorder(border);
			
			PdfPCell c1 = new PdfPCell(new Phrase("SubTotal", FontConstants.SMALL_BOLD));
	        c1.setBackgroundColor(BaseColor.ORANGE);
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);
	        
	       
	    	PdfPCell c2 = new PdfPCell(new Phrase(String.valueOf(sum), FontConstants.SMALL_BOLD));
	        c2.setBackgroundColor(BaseColor.RED);
	        c2.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c2);
			
		}
	    
	   
    private static void createFinalAmount(Document document, Long creditTotalSum, Long debitTotalSum) throws DocumentException {
		
        Paragraph preface1 = new Paragraph();
        addEmptyLine(preface1, 3);
        PdfPTable table = new PdfPTable(2);
    
    	  PdfPCell cell = table.getDefaultCell();
	    
	       cell.setBorder(PdfPCell.NO_BORDER);
			
		
	  PdfPCell c1 = new PdfPCell(new Phrase("Final Amount To be Paid", FontConstants.BLUE_BOLD_FONT));
      c1.setBackgroundColor(BaseColor.RED);
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      
      PdfPCell c2 = new PdfPCell(new Phrase(String.valueOf(creditTotalSum-debitTotalSum), FontConstants.BLUE_BOLD_FONT));
      c2.setBackgroundColor(BaseColor.RED);
      c2.setHorizontalAlignment(Element.ALIGN_CENTER);
      table.addCell(c2);
      
        preface1.add(table);
        document.add(preface1);
		
	}



	
    public static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

 

    public static void addToTable(PdfPTable table, String data){  
    	PdfPCell c1 = new PdfPCell(new Phrase(data, FontConstants.NORMAL_FONT));
    	c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
    }
    
    public static void addEmptyCell(PdfPTable table) {
    	 table.addCell(new Phrase("", FontConstants.NORMAL_FONT));
    }
    
    private static void addToTable(PdfPTable table, long data) {
			addToTable(table, String.valueOf(data));
	}
    

	private static void addToTable(PdfPTable table, LocalDate data) {
			addToTable(table, String.valueOf(data));
	}

    public static Paragraph getParagraph(){        
        Paragraph paragraph = new Paragraph();
        paragraph.setFont(FontConstants.NORMAL_FONT);
        addEmptyLine(paragraph, 1);
        return paragraph;
    }
} 